TASK 1: Alphabet is represented as a list of myChar objects.
TASK 2: Strings are represented in linked list form with each node being a oneString (meaning that it contains a single myChar) or emptyString object (which contains epsilon). Each linked list ends with an emptyString object.
TASK 3: TODO
TASK 4: DFAs are represented as described in the project description. The set of states and set of accept states are represented as membership functions (which are function pointers in C++). When creating a DFA object, I use lambdas to create these functions.
TASK 5: I have created a DFA called acceptsNothing. It is located within the makeAndTestDFAs() function and there are 12 inputs it is tested with.
TASK 6: I have created a DFA called onlyAcceptsEmptyString. It is located within the makeAndTestDFAs() function and there are 12 inputs it is tested with.
TASK 7: NEED TO TEST Accomplished this by changing the DFAs membership functions to std::function objects, instead of function pointers
TASK 8: I have created 12 example DFAs (including acceptsNothing and onlyAcceptsEmptyString). They are all created and tested within makeAndTestsDFAs(). They do practical things, such as testing whether a binary number is even or odd.
TASK 9: I have created 12 tests for each of my 12 DFAs within my very lengthy function, makeAndTestsDFA(). I wasn't sure of how to make this function smaller, since there are unique input strings for each of the 12 DFAs.
TASK 10: I created the accepts function within my DFA class
TASK 11: I created the trace function within my DFA class. At the moment it prints the trace to the console, but I may change this if in the future I need to return the values in some data type.
TASK 12: TODO
TASK 13: STILL NEED TO TEST Finished. Just changed the accept states function to its opposite.
TASK 14: STILL NEED TO TEST  ( task 15)
TASK 15: TODO should be quick once I get 14 done
TASK 16: STILL NEED TO TEST (task 17) I believe this should work correctly  
TASK 17: TODO this will be easy once 16 is finished
TASK 18: TODO this seems to be related to 14-17, so maybe once I get those done this will be easy to do. Also, I remember this being in the book.
TASK 19: TODO maybe need to compare the functions to check whether they have they return the same values for all values in alphabet
TASK 20: TODO this one is more tedious than difficult
TASK 21: 
TASK 22:
TASK 23:
TASK 24: TODO every DFA is an NFA, so just need to copy the DFA values over to an NFA object
TASK 25:
TASK 26:
TASK 27:
TASK 28:
TASK 29:
TASK 30:
TASK 31:
TASK 32:
TASK 33:
TASK 34:
TASK 35:
TASK 36:
TASK 37:
TASK 38:
TASK 39:
TASK 40:
TASK 41:
TASK 42:
TASK 43:
TASK 44:
TASK 45:
TASK 46:
TASK 47:
TASK 48:
TASK 49:
TASK 50:
TASK 51:
TASK 52:
TASK 53:
TASK 54:
TASK 55:



