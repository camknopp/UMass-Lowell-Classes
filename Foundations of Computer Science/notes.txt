TASK 1: Done. Alphabet is represented as a list of myChar objects.
TASK 2: Done. Strings are represented in linked list form with each node being a oneString (meaning that it contains a single myChar) or emptyString object (which contains epsilon). Each linked list ends with an emptyString object.
TASK 3: TODO
TASK 4: Done. DFAs are represented as described in the project description. The set of states and set of accept states are represented as membership functions (which are function pointers in C++). When creating a DFA object, I use lambdas to create these functions.
TASK 5: Done. I have created a DFA called acceptsNothing. It is located within the makeAndTestDFAs() function and there are 12 inputs it is tested with.
TASK 6: Done. I have created a DFA called onlyAcceptsEmptyString. It is located within the makeAndTestDFAs() function and there are 12 inputs it is tested with.
TASK 7: Done. Accomplished this by changing the DFAs membership functions to std::function objects, instead of function pointers
TASK 8: Done. I have created 12 example DFAs (including acceptsNothing and onlyAcceptsEmptyString). They are all created and tested within makeAndTestsDFAs(). They do practical things, such as testing whether a binary number is even or odd.
TASK 9: Done. I have created 12 tests for each of my 12 DFAs within my very lengthy function, makeAndTestsDFA(). I wasn't sure of how to make this function smaller, since there are unique input strings for each of the 12 DFAs.
TASK 10: Done. I created the accepts function within my DFA class
TASK 11: Done. I created the trace function within my DFA class. At the moment it prints the trace to the console, but I may change this if in the future I need to return the values in some data type.
TASK 12: Done. Works correcty. Implemented using recursive graph searc algorithm, which I figured out how to do from this video https://www.youtube.com/watch?v=zaBhtODEL0w&t=520s
TASK 13: Done. Finished. Just changed the accept states function to its opposite.
TASK 14: Done
TASK 15: Done
TASK 16: Done
TASK 17: Done
TASK 18: Done. Finished using this mathematical explanation of DFA subsets https://cs.stackexchange.com/questions/9130/testing-whether-the-language-of-one-automaton-is-a-subset-of-another
TASK 19: Done
TASK 20: Done. This mathematical explanation here helped https://cs.stackexchange.com/questions/81813/is-the-equality-of-two-dfas-a-decidable-problem .
TASK 21: Done
TASK 22: Done
TASK 23: Done. I have a separate transition function for what a state transition to on epsilon.
TASK 24: Done. Just needed to set the values of the NFA equal to the values of the DFA
TASK 25: Done. Didn't make a dozen example NFAs, but made enough to ensure that my data structure works correctly.
TASK 26: Done. Wrote the traces in the form of linked list tracePairNodes. These are defined and described in tracePairNode.hpp
TASK 27: Done. Compares trace nodes to generated states with each character of inputted string in NFA.
TASK 28: Done. Trace trees represented by strings. 
TASK 29: Done. Trace trees written in the form of strings at the top of the section entitled "Trace Tree Function Tests"
TASK 30: Done. Trace tree prints out each level of the tree. Regular transitions are in form  {<last state>/<input>/<new state>} and epsi transitions in the form [<last state>/<new state>]. The last is in the form { <state>/<accepting YES or NO>}
TASK 31: Done. Didn't write a dozen examples for each NFA, but made enough to know that they are functioning correctly.
TASK 32: Done. Steps through input string character by character and runs transition function & checks for epsi transitions
TASK 33: Done. Implemented using NFAComboState, which can be an accept state, a state from nfa1, a state from nfa2, or an accept state (which actually wasn't needed in the end).
TASK 34: Done. Utilized NFAComboState and epsilon transition to start state of nfa2 when I reach accept state of nfa1.
TASK 35: Done. Tests written in section entitled "NFA Concatenation Tests"
TASK 36: Done. Function adds new start state that epsi transitions to old state, and also adds in epsilon transitions from accept states to the old start state
TASK 37: Done. Tests written in section entitled "NFA Kleene Star Tests"
TASK 38: Done. Returned DFA is of type myVector<NFA's state type>. This allows the DFA's state to each be a set of states and also this allows the DFA's transition function to return a set of states.
TASK 39: Done. Tests written in section entitled "NFA2DFA Tests"
TASK 40: Done. Tests can be found under "NFA2DFA Tests". Created and converted 2 NFAs to DFAs manually (using examples from texbook and Youtube) and then auto-converted the NFAs using my NFA2DFA function, and then finally compared the DFAs using the equalityDFA function
TASK 41: Done. Regex are represented by the classes charRegex, emptySetRegex, epsiRegex, unionRegex, concatRegex, and kleeneRegex. They all inherit from the class regex.hpp
TASK 42:
TASK 43:
TASK 44:
TASK 45:
TASK 46:
TASK 47:
TASK 48:
TASK 49:
TASK 50:
TASK 51:
TASK 52:
TASK 53:
TASK 54:
TASK 55:



