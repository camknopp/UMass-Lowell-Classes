From pacman.py
- A GameState specifies the full game state, including the food, capsules,
    agent configurations and score changes.

functions:
    def getLegalActions( self, agentIndex=0 ):
        Returns the legal actions for the agent specified.

def generateSuccessor( self, agentIndex, action):
        Returns the successor state after the specified agent takes the action.


def generatePacmanSuccessor( self, action ):
        Generates the successor state after the specified pacman move

def getPacmanState( self ):
        Returns an AgentState object for pacman (in game.py)

        state.pos gives the current position
        state.direction gives the travel vector


def getCapsules(self):
        Returns a list of positions (x,y) of the remaining capsules.


def getFood(self):
        Returns a Grid of boolean food indicator variables.

        Grids can be accessed via list notation, so to check
        if there is food at (x,y), just call

        currentFood = state.getFood()
        if currentFood[x][y] == True: ...


def getWalls(self):
        Returns a Grid of boolean wall indicator variables.

        Grids can be accessed via list notation, so to check
        if there is a wall at (x,y), just call

        walls = state.getWalls()
        if walls[x][y] == True: ...

def __init__( self, prevState = None ):
        Generates a new state by copying information from its predecessor.


def __eq__( self, other ):
        Allows two states to be compared.

def __hash__( self ):
        Allows states to be keys of dictionaries.
        return hash( self.data )


def initialize( self, layout, numGhostAgents=1000 ):
        Creates an initial game state from a layout array (see layout.py).
        self.data.initialize(layout, numGhostAgents)